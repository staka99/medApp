// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AccessControl {

    // ------------------------ OVLAŠĆENJE DOKTORU ------------------------
    mapping(address => mapping(address => bool)) public grantedAccesses;

    function grantAccess(address _doctor) public {
        grantedAccesses[msg.sender][_doctor] = true;
    }

    function isAccessGranted(address _doctor) public view returns (bool) {
        return grantedAccesses[msg.sender][_doctor];
    }

    function hasAccess(address _patient) public view returns (bool) {
        return grantedAccesses[_patient][msg.sender];
    }

    function revokeAccess(address _doctor) public {
        grantedAccesses[msg.sender][_doctor] = false;
    }

    // ------------------------ OVLAŠĆENJE DRUGOJ OSOBI ------------------------
    mapping(address => mapping(address => bool)) public allowedPermission;

    function allowPermission(address _person1) public {
        allowedPermission[msg.sender][_person1] = true;
    }

    function hasPermission(address _person2) public view returns (bool) {
        return allowedPermission[_person2][msg.sender];
    }


    // ------------------------ PRISTUP U IME DRUGE OSOBE ------------------------
       function grantAccessToAnotherPerson(address _patient, address _doctor) public {
        grantedAccesses[_patient][_doctor] = true;
    }


    // ------------------------ HITAN SLUČAJ ------------------------
    mapping(address => mapping(address => bool)) public hasTriggeredEmergency;

    mapping(address => uint256) public emergencyCallCounts;

    function triggerEmergency(address _patient) public {
        hasTriggeredEmergency[_patient][msg.sender] = true;
        emergencyCallCounts[_patient] += 1;
    }

    function revokeEmergencyCall(address _patient) public {
        hasTriggeredEmergency[_patient][msg.sender] = false;
        emergencyCallCounts[_patient] -= 1;
    }

    function isEmergencyActivated(address _patient) public view returns (bool) {
        return emergencyCallCounts[_patient] >= 3;
    }

    function hasDoctorTriggeredEmergency(address _patient) public view returns (bool) {
        return hasTriggeredEmergency[_patient][msg.sender];
    }

}
